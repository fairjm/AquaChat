@page "/"
@using AquaChat.Services
@using CommunityToolkit.Maui.Alerts
@using AquaChat.Models
@using Markdig
@using Markdig.Prism
@inject ChatService ChatService
@inject ChatMessageState State
@inject IJSRuntime JS

<style>
    #btnTop {
        position: fixed;
        right: 1rem;
        bottom: 7rem;
        z-index: 99;
    }

    #btnBottom {
        position: fixed;
        right: 1rem;
        bottom: 5rem;
        z-index: 99;
    }

    .oi {
        font-size: 1.5rem;
        color: gray; 
    }
</style>

<!-- 聊天窗口容器 -->
<div class="flex-1 overflow-y-auto p-4 mb-16">

    @foreach (var item in Messages)
    {
        if (item.ReferenceContent is not null)
        {
            <!-- 带有引用的消息 -->
            <div class="mb-2 p-2 rounded-lg bg-white text-black w-full shadow-lg relative backdrop-blur">
                <button onclick="toggleQuote(this, 'quote1')"
                        class="block mb-1 top-1 right-1 bg-black text-white px-2 py-1 rounded opacity-75">
                    Open
                </button>
                <div id="quote-@item.Id" class="mb-2 p-2 border-l-4 border-gray-400 bg-gray-200 text-black italic"
                     style="display: none;">
                    @item.ReferenceContent
                </div>
                @((MarkupString)Markdown.ToHtml(item.Content ?? "", MarkdownPipeline))
            </div>
        }
        else
        {
            <div class="mb-2 p-2 rounded-lg bg-gray-100 text-black w-full shadow-lg backdrop-blur">
                @((MarkupString)Markdown.ToHtml(item.Content ?? "", MarkdownPipeline))
            </div>
        }
    }
</div>

<div class="fixed bottom-5 left-0 right-0 p-2 bg-white rounded-xl shadow-xl mx-4 backdrop-blur">
    <div class="flex items-center border rounded-xl overflow-hidden">
        <textarea id="input-text" class="flex-1 p-2 resize-none outline-none focus:ring focus:ring-gray-400"
                  rows="1" placeholder="input something..." @bind="TextAreaText"></textarea>
        <button class="bg-black text-white rounded-xl px-4 py-2 shadow-md mr-2 opacity-75" disabled="@_disabled" @onclick="SendMessage">
            ➤
        </button>
    </div>
</div>

<button id="btnTop"><span class="oi oi-caret-top"></span></button>
<button id="btnBottom" @onclick="GoToBottom"><span class="oi oi-caret-bottom"></span> </button>

<script>

    // 获取按钮元素
    const btnTop = document.getElementById('btnTop');
    const btnBottom = document.getElementById('btnBottom');

    // 滚动事件处理
    window.addEventListener('scroll', function () {
        // 根据滚动位置显示/隐藏按钮
        if (document.documentElement.scrollTop > 200) {
            btnTop.style.display = 'block';
        } else {
            btnTop.style.display = 'none';
        }

        if (window.innerHeight + window.pageYOffset >= document.body.offsetHeight) {
            btnBottom.style.display = 'block';
        } else {
            btnBottom.style.display = 'none';
        }

    });

    btnTop.addEventListener('click', function () {
        document.body.scrollTop = 0;
        document.documentElement.scrollTop = 0;
    });

    function goToBottom() {
        window.scrollTo(0, document.body.scrollHeight);
    }

    function toggleQuote(buttonElement, quoteId) {
        const quoteElement = document.getElementById(quoteId);
        if (quoteElement.style.display === 'none') {
            quoteElement.style.display = 'block';
            buttonElement.innerText = 'Close';
        } else {
            quoteElement.style.display = 'none';
            buttonElement.innerText = 'Open';
        }
    }
</script>

@code
{
    private static readonly MarkdownPipeline MarkdownPipeline = new MarkdownPipelineBuilder()
        .UseAdvancedExtensions()
        .UsePrism()
        .Build();

    private bool _disabled = false;

    private bool _afterMessage = false;

    private List<Message> Messages { get; set; } = new List<Message>();

    private string? TextAreaText { get; set; }

    protected override async Task OnInitializedAsync()
    {
        SetSendButtonDisable();
        await base.OnInitializedAsync();
        if (State.CurrentChat is null)
        {
            await Toast.Make("current chat not exists").Show();
            await Shell.Current.GoToAsync(nameof(ChatPage));
        }
        else
        {
            Messages = await ChatService.ListChatMessages(State.CurrentChat.Id);
        }
        SetSendButtonEnabled();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {

        await JS.InvokeVoidAsync("Prism.highlightAll");
        if (firstRender || _afterMessage)
        {
            await GoToBottom();
            _afterMessage = false;
        }
    }

    private async Task GoToBottom()
    {
        await JS.InvokeVoidAsync("goToBottom");
    }

    private async Task SendMessage()
    {
        if (string.IsNullOrWhiteSpace(TextAreaText))
        {
            await Toast.Make("please input something").Show();
            return;
        }
        SetSendButtonDisable();
        Messages.Add(new Message
            {
                Content = TextAreaText,
                Created = DateTime.Now,
                MessageType = Message.TypeHuman
            });
        var msg = TextAreaText;
        TextAreaText = "";
        _afterMessage = true;
        var chatResponse = await ChatService.ChatResponse(State.CurrentChat!.Id, msg);
        Messages.Add(chatResponse);
        SetSendButtonEnabled();
        _afterMessage = true;
    }

    private void SetSendButtonDisable()
    {
        _disabled = true;
    }

    private void SetSendButtonEnabled()
    {
        _disabled = false;
    }


}
